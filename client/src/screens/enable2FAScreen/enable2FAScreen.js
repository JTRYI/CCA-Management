import React, { useEffect, useState } from 'react';
import './enable2FAScreen.css';
import { Heading, Text, Input, Image, Button, FormControl, FormErrorMessage, CircularProgress } from '@chakra-ui/react';
import { useToast } from '@chakra-ui/react';

function Enable2FAScreen() {

    const toast = useToast();

    const token = sessionStorage.getItem('token');
    const [qrImage, setQRImage] = useState('');

    const [form, setForm] = useState({ code: "" });
    const [validationErrors, setValidationErrors] = useState({
        code: '',
    });

    //Get QR Code
    useEffect(() => {
        async function getQR() {
            try {
                const response = await fetch(`http://localhost:5050/qrImage/${token}`);
                const { qrImage, success } = await response.json();

                if (success) {
                    setQRImage(qrImage);

                } else {

                    toast({
                        title: 'Error Fetching QR Code',
                        status: 'error',
                        duration: 5000,
                        isClosable: true,
                    })

                }

            } catch (error) {
                toast({
                    title: 'Error',
                    description: error,
                    status: 'error',
                    duration: 5000,
                    isClosable: true,
                })
            }

        }

        // Setting a timeout to delay the execution of fetchQR by 2 seconds
        const timeoutId = setTimeout(getQR, 2000);

        // Clearing the timeout if the component unmounts or when the effect is re-executed
        return () => clearTimeout(timeoutId);


    }, []);

    async function submit2FACode(e) {
        e.preventDefault();

        const errors = [];

        if (form.code === '') {
            errors.push({ field: 'code', message: 'Code Blank.' });
        }

        // Update validation errors state with accumulated errors
        setValidationErrors((prevErrors) => {
            const newErrors = { ...prevErrors };
            errors.forEach((error) => {
                newErrors[error.field] = error.message;
            });
            return newErrors;
        });

        // If there are errors, prevent form submission
        if (errors.length > 0) {
            return;
        }

        try {
            const new2FACode = { ...form };

            const response = await fetch(`http://localhost:5050/set2FA/${token}/`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(new2FACode),
            })

            const responseData = await response.json();
            console.log(responseData);

            if (responseData.message === "Invalid 2FA Code, Not Verified.") {
                setForm(prevForm => ({ ...prevForm, code: '' }));
                errors.push({ field: 'code', message: 'Invalid Code.' });
                // Update validation errors state with the error message
                setValidationErrors((prevErrors) => {
                    const newErrors = { ...prevErrors };
                    errors.forEach((error) => {
                        newErrors[error.field] = error.message;
                    });
                    return newErrors;
                });

            } else {
                setForm(prevForm => ({ ...prevForm, code: '' }));
                toast({
                    title: '2FA Set Up Complete!',
                    status: 'success',
                    duration: 5000,
                    isClosable: true,
                })

            }
        } catch (error) {
            console.error(error);

        }
    }

    return (
        <div className="twoFAScreen">
            <Heading size='lg' color='#996515'>
                Update or Enable 2FA Here
            </Heading>

            <Heading size='md' marginTop='20px'>
                Steps to Enable 2FA:
            </Heading>

            <Text fontSize='md' marginTop='20px'>
                <b>Step 1:</b> Open your Authenticator App (e.g., Google Authenticator) or use a browser extension.
                <br />
                <br />
                <b>Step 2:</b> Scan the QR Code below with the app.
                <br />
                <br />
                <b>Step 3:</b> Type in the code generated by the app and press the "Set" button to complete the setup.
            </Text>

            {qrImage.length > 0 ? <Image
                id='qrcode'
                boxSize='150px'
                marginTop='30px'
                objectFit='cover'
                src={qrImage}
            /> : <CircularProgress isIndeterminate marginTop='30px' color='#996515' />}

            <form onSubmit={submit2FACode} style={{ display: 'flex', flexDirection: 'column' }}>
                <FormControl isInvalid={validationErrors.code !== ''}>
                    <Input
                        placeholder='Enter 2FA Code'
                        marginTop='20px'
                        width='150px'
                        focusBorderColor='#996515'
                        value={form.code}
                        onChange={(e) => {
                            setForm(prevForm => ({ ...prevForm, code: e.target.value }));
                            setValidationErrors((prevErrors) => ({ ...prevErrors, code: '' }));
                        }}>
                    </Input>
                    <FormErrorMessage>{validationErrors.code}</FormErrorMessage>
                </FormControl>
                <Button type='submit' backgroundColor='rgba(153, 101, 21, 1);'
                    color={'white'} borderRadius={5} width='150px'
                    borderColor='#996515'
                    _hover={
                        {
                            color: 'black'
                        }
                    }
                    marginTop='20px'>SET</Button>
            </form>

        </div>
    );
}

export default Enable2FAScreen;